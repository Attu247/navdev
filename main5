import RPi.GPIO as GPIO
import os
from time import sleep
from ultralytics import YOLO
from gtts import gTTS
import google.generativeai as genai
import bluetooth  # Add bluetooth module

# Initialize YOLO and Gemini API
model = YOLO('yolov8n.pt')
gem_api_key = "AIzaSyC_Fe1avLOL7x-_B08A4PKaOHkSh8DUbXI"
genai.configure(api_key=gem_api_key)

# Bluetooth setup
server_sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
server_sock.bind(("", bluetooth.PORT_ANY))
server_sock.listen(1)

print("Waiting for Bluetooth connection...")
client_sock, client_info = server_sock.accept()
print(f"Accepted connection from {client_info}")

def capture_and_analyze():
    camera_image_path = '/home/derpzyz/captured_image.jpg'
    
    # Capture an image from the Raspberry Pi Camera
    os.system(f"libcamera-still -o {camera_image_path} --nopreview")
    
    # Run YOLO detection
    results = model(camera_image_path)
    
    # Extract predictions and generate a description
    detected_objects = []
    for result in results:
        for obj in result.boxes:
            label = result.names[int(obj.cls)]
            confidence = float(obj.conf)
            detected_objects.append(f"{label} ({confidence:.2f})")

    description = "Detected: " + ", ".join(detected_objects) if detected_objects else "No objects detected."
    
    # Generate a description with Gemini
    sample_file = genai.upload_file(path=camera_image_path, display_name="sidewalk")
    gem_prompt = """Act as a Safety Inspector..."""  # Use your full Gemini prompt here
    gem_model = genai.GenerativeModel("gemini-1.5-flash")
    response = gem_model.generate_content([sample_file, gem_prompt])

    # Convert to speech
    tts = gTTS(text=response.text, lang='en')
    speech_output_path = '/home/derpzyz/navigation_output.mp3'
    tts.save(speech_output_path)

    # Play the speech output
    os.system(f"mpg321 {speech_output_path}")
    
    return description

# Main loop for Bluetooth communication
while True:
    data = client_sock.recv(1024)  # Listen for incoming Bluetooth data
    command = data.decode('utf-8').strip()  # Decode the command sent from the phone
    if command == "capture":
        result = capture_and_analyze()
        client_sock.send(f"Command executed: {result}")
    else:
        client_sock.send("Unknown command")

# Close Bluetooth connection
client_sock.close()
server_sock.close()
